generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  username      String?
  name          String?
  email         String?   @unique
  image         String?
  bio           String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  Account       Account[]
  Session       Session[]
  followedBy    Follows[] @relation("following")
  following     Follows[] @relation("follower")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String   @id @default(uuid())
  title     String?
  imgUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]

  User    User      @relation(fields: [userId], references: [id])
  userId  String
  Comment Comment[]
}

model Like {
  id     String @id @default(uuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String
}

model Comment {
  id     String @id @default(uuid())
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String
  User   User?  @relation(fields: [userId], references: [id])
  userId String
}
